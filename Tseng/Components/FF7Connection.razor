@using Shojy.FF7.Reno
@using Shojy.FF7.Reno.Models
@using Shojy.FF7.Reno.Models.Enums
@using Tseng.Services
@using Tseng.Models
@using System.ComponentModel
@using Shojy.FF7.Elena
@using Shojy.FF7.Elena.Equipment
@using Shojy.FF7.Elena.Items
@using Shojy.FF7.Elena.Sections
@using Tseng.Components.Character
@using Tseng.Models.Enums

@inject IFF7InteractionService InteractionService;
@inject IGameService GameService;

@if(_isLoading || _gameData is null) 
{
    <p>Loading...</p>
} 
else switch (_gameData.GameState)
{
    case GameState.Disconnected:
        <p>Disconnected</p>
        break;
    case GameState.Searching:
        <p>Connecting to game...</p>
        break;
    case GameState.Connected:
        <p>Game Connected</p>
        break;
    default:
        <p>Unknown state</p>
        break;
}

@code {

    bool _isLoading = false;

    SaveMap SaveMap => _gameData!.SaveMap;
    BattleMap BattleMap => _gameData!.BattleMap;
    GameData? _gameData;
    
    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        _gameData = GameService.GameData;
        GameService.GameData.PropertyChanged += OnGameDataOnPropertyChanged;
        
        var tokenSource = new CancellationTokenSource();

        await GameService.StartMonitoring(tokenSource.Token);
        _isLoading = false;
    }

    private async void OnGameDataOnPropertyChanged(object? o, PropertyChangedEventArgs propertyChangedEventArgs)
    {
        await InvokeAsync(StateHasChanged);
    }
}
