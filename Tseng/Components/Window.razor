@using Tseng.Services
@using System.ComponentModel
@using Shojy.FF7.Reno.Models
@inject IGameService GameService

@if (_hasData)
{
    <div class="ff7" style="background: rgb(@c.Average.R, @c.Average.G, @c.Average.B); box-sizing: border-box; margin: 4px;@(Fill? "width: calc(100% - 12px); height: calc(100% - 12px);" : "")">
        <div class="layer border"
         style="background: linear-gradient(to top left, rgba(@c.TopLeft.Red,@c.TopLeft.Green,@c.TopLeft.Blue, 0) 50%, rgba(@c.TopLeft.Red,@c.TopLeft.Green,@c.TopLeft.Blue, 1)),
                            radial-gradient(farthest-side at top right, rgba(@c.TopRight.Red,@c.TopRight.Green,@c.TopRight.Blue, 1), rgba(@c.TopRight.Red,@c.TopRight.Green,@c.TopRight.Blue, 0)),
                            radial-gradient(farthest-side at bottom left, rgba(@c.BottomLeft.Red,@c.BottomLeft.Green,@c.BottomLeft.Blue,1), rgba(@c.BottomLeft.Red,@c.BottomLeft.Green,@c.BottomLeft.Blue, 0)),
                            linear-gradient(to bottom right, rgba(@c.BottomRight.Red,@c.BottomRight.Green,@c.BottomRight.Blue, 0) 50%, rgba(@c.BottomRight.Red,@c.BottomRight.Green,@c.BottomRight.Blue, 1));
            "></div>
        <div class="text">
            @ChildContent
        </div>
    </div>
}
else
{
    <div class="ff7" style="background: rgb(0, 0, @Blue); box-sizing: border-box; margin: 4px;@(Fill? "width: calc(100% - 12px); height: calc(100% - 12px);" : "")">
        <div class="layer border"></div>
        <div class="text">
            @ChildContent
        </div>
    </div>
}

@code {

    // ReSharper disable once InconsistentNaming
    WindowColor c;

    bool _hasData = false;

    private int[][] _colors = {
        new[] {0, 0, 176, 0},
        new[] {0, 0, 80, 0},
        new[] {0, 0, 128, 0},
        new[] {0, 0, 32, 0},
    };

    private int Blue => GetColorAverage(176, 80, 128, 32);

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool Fill { get; set; } = false;

    protected override Task OnInitializedAsync()
    {
        GameService.GameData.PropertyChanged += GameDataOnPropertyChanged;
        return Task.CompletedTask;
    }

    private void GameDataOnPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        c = GameService.GameData.SaveMap.WindowColor;
        _hasData = GameService.GameData.SaveMap != default;
        InvokeAsync(StateHasChanged);
    }

    private static int GetColorAverage(params int[] values)
    {
        double sum = values.Sum(v => v * v);
        var mean = Math.Sqrt(sum / values.Length);
        return (int)Math.Round(mean);
    }
}