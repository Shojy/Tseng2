@page "/collections/{type}"
@using Tseng.Models
@using Tseng.Services
@using System.ComponentModel

@inject IGameService GameService;

@if (!_isLoading && _gameData is not null)
{

    switch (Type.ToLower())
    {
        case "gil":
            <span class="gil">@_gameData.SaveMap.Gil Gil</span>
            break;
    }
}
@code {

    bool _isLoading;

    GameData? _gameData;


    protected override async Task OnInitializedAsync()
    {
        if (_isLoading) return;

        _isLoading = true;
        _gameData = GameService.GameData;
        GameService.GameData.PropertyChanged += OnGameDataOnPropertyChanged;


        var tokenSource = new CancellationTokenSource();

        await GameService.StartMonitoring(tokenSource.Token);
        _isLoading = false;

    }

    private async void OnGameDataOnPropertyChanged(object? o, PropertyChangedEventArgs propertyChangedEventArgs)
    {
        await InvokeAsync(StateHasChanged);
    }
    [Parameter]
    public string Type { get; set; }



    private void GameDataOnPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }
}