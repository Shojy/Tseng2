@page "/"
@using Tseng.Services
@inject IJSRuntime JSRuntime
@inject IAssetExtractionService AssetExtractionService

<style>
    input {
        width: 300px;
        background: #454545;
    }

    button {
        background: #454545;
    }

    label {
        width: 200px;
        display: inline-block;
    }

    .scroll-wrapper {
        height: 100%;
        width: 100%;
        padding: 0;
        margin: 0;
        overflow: auto;
    }
</style>
<div class="scroll-wrapper">
    <FF7Window Fill="true">
        <div style="text-align:center">
            <FF7Connection />
        </div>
        
        <p>
            <a href="party">View Party</a>
        </p>

        @*<h2>Setup</h2>
        <hr />
        <p>
            <button @onclick="async () => await ExtractAssets()" disabled="@_isExtracting">Extract Images</button>
            @(_isExtracting? "Extracting..." : "")
        </p>*@

        <h2 style="margin-top: 30px;">Ready to Use OBS Components</h2>
        <hr />
        @foreach (var link in _componentsLinks)
        {
            <label>@link.Key</label>
            <input type="text" readonly="readonly" value="@link.Value" />
            <button @onclick="async () => await CopyTextToClipboard(link.Value)">Copy</button>
            <br />
        }


        <h2 style="margin-top: 30px;">Bits (Compose your own layout!)</h2>
        <hr />
        
        @foreach (var link in _bitsLinks)
        {
            <label>@link.Key</label>
            <input type="text" readonly="readonly" value="@link.Value" />
            <button @onclick="async () => await CopyTextToClipboard(link.Value)">Copy</button>
            <br />
        }
    </FF7Window>
</div>


@code
{

    private Dictionary<string, string> _bitsLinks = new()
    {
        {"Window", "http://localhost:7777/window"},
        {"Party Member 1", "http://localhost:7777/party/1"},
        {"Party Member 2", "http://localhost:7777/party/2"},
        {"Party Member 3", "http://localhost:7777/party/3"},
        {"Gil", "http://localhost:7777/collections/gil"},
        {"Disc", "http://localhost:7777/stats/disc"},
        {"Play Time", "http://localhost:7777/stats/time"},
    };
    private Dictionary<string, string> _componentsLinks = new()
    {
        {"Party", "http://localhost:7777/party"},
    };

    private async Task CopyTextToClipboard(string text)
    {
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", text);
    }

    private async Task ExtractAssets()
    {
        if (_isExtracting) return;

        _isExtracting = true;
        await AssetExtractionService.ExtractAllAssets();
        _isExtracting = false;
    }

    private bool _isExtracting;
}
